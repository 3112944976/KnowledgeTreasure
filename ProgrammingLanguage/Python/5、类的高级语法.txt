1、魔法方法（自定义的、重写的内置方法）：
#魔术方法就是类中的一个方法，和普通方法唯一不同的是它不需要直接调用，会自动触发。
#这些魔术方法的名字是特定的，坚决不可修改(但参数列表的参数是可以修改的)
#含有高阶函数的应用原理：将类实例化给一个变量a后，我们通过形如：a(x)，这样来调用类的方式。

1.1、[对象名].__dict__()：
在__init__中声明的变量，会存到实例的 __dict__中，__dict__中存储了对象的一些属性。
----
eg1.1:
class People():
    country = 'China'
    def __init__(self, name):
        self.name = name
p = People('tank', 18, 'male')
# 普通方式
print('name' in p.__dict__)
#hasatter
print(hasattr(p, 'name'))
----
小知识：
1>hasattr()：
由eg1.1可知，hasattr()起了和“'name' in p.__dict__”一样的作用（判断是否为包含关系）。
2>setattr([对象名], [name]):
由eg1.1可知，可通过该函数实现（设置/者修改已经创建好的实例化对象）__init__中初始化的属性。
3>gettattr():

1.2、__call__():[调用(详情可见AI寒假Python集训课堂笔记-lesson4面向对象基础)]
#在类中自定义 __call__魔法方法，然后实例化类对象后，通过[实例化对象名]（）来自动调用__call__函数。

1.3、自定义容器（容器魔法）:
#以自定义切片为例，可见lesson4面向对象基础homework。
#以自定义容器为例，可见lesson4面向对象基础。
小知识：
1>切片类(slice)：使用 slice 类进行切片操作
https://blog.csdn.net/qq_34769162/article/details/107711331?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control

1.4、__pos__(self):(数值处理魔法）
#详情可见lesson4面向对象基础-数值处理魔法

1.5、__eq__(self, other):(比较魔法)
#详情可见lesson4面向对象基础-比较魔法

1.6、__del__(self)及__init__(self):(删除及构成魔法)
#详情可见lesson4面向对象基础-构造和初始化魔术


