#所有的序列本质上还是变量对象，它们本身都不直接存储值，而是存储值得引申。

# 可哈希（不可变）的数据结构：数字、tuple、strings、object对象集
# hash():哈希函数是种压缩映射（把任意长度的值，通过散列算法变换成固定长度散列值，输出返回），该函数的适用对象必须是可哈希的。
# 可迭代对象：dict、set、序列(strings, tuple, list)、迭代器/生成器对象。判断方法：isinstance(变量, Iterable)
# set and dict是使用哈希表来存储元素的，这样的方式使得他们有了比list,tuple,str更快的查找速度。
# 列表推导式得到的是列表，而生成器推导式得到的是生成器对象。

1、list
（1）元素类型多样
（2）元素可为空
（3）其不直接储存值（元素是引用的）：Python是基于值的自动内存管理模式，序列本身可以看为是一种组织值的变量，它本身不储存值，而是记忆了值的引申和地址。
（4）避免过多的使用list：时空复杂度较高
（5）有序可变序列：其内部的数值是有序的可变的
（6）支持双向索引的方式对list内部的数据进行增、删、改、查操作。
（7）list具有内存自动收缩和扩张功能
（8）list常用方法
	append(x):将x追加道列表尾
	extend(L):将列表L中的所用元素追加到列表尾部=
	insert(index,x):在列表的Index位置插入x
	remove(x):在列表中删除第一个出现的x
	pop([index]):删除并返回列表中下标为indes的元素（栈原理，后进先弹出：消除并外显）
	clear():清空列表中的所用元素，保留列表对象
	index(x):返回列表中第一个x的索引
	count(x):计算x在列表中出现的次数
	reverse():对所有列表元素进行原地逆序
	sort(key=None,reverse=False):True表示降序
	copy():返回列表的浅复制
		浅复制只是把子列表的引用复制到新的列表中，因此使用
		这样的复制方法创建的新列表中若含有不可哈希的元素，
		则对该元素的修改会传染到原列表中。
		而深克隆就解决了这一问题（import copy,y=copy.deepcopy(x)）。
（9）对list的+=运算是原地操作，x=x+[1]是新地址操作
（10）列表推导式具有遍历、过滤或再计算的功能；其优势是可读性强，代码简洁。（详见P53）
（11）通过索引切片技术来增、删、改、修操作List（x[起点索引位:终点索引位:顺逆序]）
	x=[1,2,3,4,5,6,7,8,9]
	x[ : : ]  # 返回原列表
	x[ : :-1]  # 返回逆序列表

2、tuple
（1）本质上是轻量级列表（时空复杂度低于List），其性质基本与list相似。
（2）其是不可变序列，List中的增、删、改操作在tuple中无效。
（3）生成器对象（yield原理实现记忆性截取）
	1>其使用的方式类似于列表推导式，但是其又有数据寄存的性质，当我们按照顺序对一个生成器对象访问操作后，访问过的值会被覆盖丢失。
	2>只有对生成器对象进行数据容器得声明后，才能外显出其对象中得数据。

3、strings
（1）有序不可变的序列，有类似于tuple的操作，支持双向索引的查找操作模式。

4、dict
（1）其是无序可变的序列
（2）其中的元素是双参数元素，这两个参数分别叫键（必须可哈希且不可重复）和值。
（3）其支持以键为下标的索引检索方式
	x['age']=30:若x中有age则修改dict，否则就添加新元素。
（4）常用的方法
	.get('x', 'Not Exists!'):用来返回指定键对应的值#若不存在该键，可以返回（）内部写好的第二位置值。
	.popitem():弹出一个元素#（）内部必须是空的(栈原理)
	.pop('sex'):指定弹出一个元素，并显示弹出其键相对应的值(栈原理)
（5）常用的类:
	1.import collections x=collections.OrderedDict()  # 创建一个强调顺序的dict
	2.from colletions import Counter
	f = Counter(dict_001)
	f.items()
	f.most_common(1)  # 返回出现次数最多的一个字符及其频率
（6）x.items():指代所有的元素|x.keys()：指代所有数据元素的键值|x.values:指代所有数据元素的值

5、set
（1）其是只有键没有值的特殊字典，因此其无序可变。
（2）其元素具有确定性、无序性、互异性。
（3）创建一个空集合的方式比较特殊：x=set()，不是x={}
（4）常用的方法：
	.add():增加一个元素
	.update():增加一个集合的值到其中
	.pop():随机删除并返回一个元素
	.remove():可指定删除一个元素
	.discard():可指定删除一个元素，若该元素不存在，不会报错
（5）set中>，<等符号是表示集合间的包含关系的且若A<B不成立，则不代表着A>=也成立。
（6）set不支持任何索引

6、序列解包
我们知道，数据结构是计算机中用来组织和储存数据的形式。我们可以形象的认为这些数据结构(对象)的数据(list,tuple... ...)是不同类型的包裹。
而当我们要给多个变量赋值的时候，会在赋值号（=）右侧的表达式中写入要赋给左边变量的值。
而对于右面的表达式，它有时候是用形如（str,tuple,list... ...）这样的包裹表示的。
最终在这样赋值的过程中，我们解开相应的数据结构，并按次序依次完成赋值工作的原理叫做：序列解包。